generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  userId                   String
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Snippet {
  id           String   @id @default(cuid())
  title        String?
  code         String?
  language     String   @default("typescript")
  theme        String   @default("bubblegum")
  fontFamily   String   @default("fira_code")
  fontSize     String   @default("14")
  lineNumbers  Boolean  @default(true)
  padding      String   @default("32")
  customColors String?  @default("{}")
  colorMode    String   @default("rgb")
  angle        Int      @default(145)
  grain        Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  views        View?

  @@index([userId])
  @@map("snippets")
}

model View {
  count     Int     @default(0)
  snippetId String  @unique
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@map("views")
}
